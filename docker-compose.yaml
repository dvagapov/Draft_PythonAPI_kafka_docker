version: '3.7'

networks:
  my-network:
    external:
      name: my-network

services:

  ############################################
  # INFRASTRUCTURE SERVICES                  #
  ############################################

  # Zookeeper instance
  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
    - ./zookeeper/log:/var/lib/zookeeper/log
    - ./zookeeper/data:/var/lib/zookeeper/data
    networks:
      - my-network
  broker:
    image: confluentinc/cp-enterprise-kafka:5.3.2
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    volumes:
    - ./kafka/data:/var/lib/kafka/data
    networks:
      - my-network

    ############################################
    # APPLICATION  SERVICES                    #
    ############################################

  postgres:
    image: postgres:12.2
    container_name: postgres
    restart: always
    #command: sh -c "chmod +x /tmp/init_db.sh && /tmp/init_db.sh"
    environment:
      POSTGRES_PASSWORD: "pass_admin"
      PGDATA: "/var/lib/postgresql/data/pgdata"
      POSTGRES_USER: "postgres"
      POSTGRES_DB: "postgres"
      POSTGRES_HOST_AUTH_METHOD: "trust"
    ports:
      - 5432:5432
    volumes:
      - ./pgconfig/init_db.sql:/docker-entrypoint-initdb.d/1-init_db.sql
      - ./pgconfig/postgres.conf:/etc/postgresql/postgresql.conf 
      - ./pgdata:/var/lib/postgresql/data
    networks:
      - my-network

  api:
    build: api/
    hostname: api
    container_name: api
    restart: always
    environment:
      FLASK_APP: "project/__init__.py"
      PG_DB: "postgres"
      PG_USER: "rec_user"
      PG_PASS: "rec$pass"
      PG_HOST: "postgres"
      RECOMMENDATIONS_TOPIC: "push.recommendations"
      KAFKA_BROKER_URI: "broker:29092"
    ports:
    - 5005:5000
    depends_on:
      - broker
      - postgres
    networks:
    - my-network